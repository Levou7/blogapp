/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReferralCode } from "./ReferralCode";
import { ReferralCodeCountArgs } from "./ReferralCodeCountArgs";
import { ReferralCodeFindManyArgs } from "./ReferralCodeFindManyArgs";
import { ReferralCodeFindUniqueArgs } from "./ReferralCodeFindUniqueArgs";
import { CreateReferralCodeArgs } from "./CreateReferralCodeArgs";
import { UpdateReferralCodeArgs } from "./UpdateReferralCodeArgs";
import { DeleteReferralCodeArgs } from "./DeleteReferralCodeArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { ReferralCodeService } from "../referralCode.service";
@graphql.Resolver(() => ReferralCode)
export class ReferralCodeResolverBase {
  constructor(protected readonly service: ReferralCodeService) {}

  async _referralCodesMeta(
    @graphql.Args() args: ReferralCodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReferralCode])
  async referralCodes(
    @graphql.Args() args: ReferralCodeFindManyArgs
  ): Promise<ReferralCode[]> {
    return this.service.referralCodes(args);
  }

  @graphql.Query(() => ReferralCode, { nullable: true })
  async referralCode(
    @graphql.Args() args: ReferralCodeFindUniqueArgs
  ): Promise<ReferralCode | null> {
    const result = await this.service.referralCode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReferralCode)
  async createReferralCode(
    @graphql.Args() args: CreateReferralCodeArgs
  ): Promise<ReferralCode> {
    return await this.service.createReferralCode({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReferralCode)
  async updateReferralCode(
    @graphql.Args() args: UpdateReferralCodeArgs
  ): Promise<ReferralCode | null> {
    try {
      return await this.service.updateReferralCode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReferralCode)
  async deleteReferralCode(
    @graphql.Args() args: DeleteReferralCodeArgs
  ): Promise<ReferralCode | null> {
    try {
      return await this.service.deleteReferralCode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [User], { name: "users" })
  async findUsers(
    @graphql.Parent() parent: ReferralCode,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
