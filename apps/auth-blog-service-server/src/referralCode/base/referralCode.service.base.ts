/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ReferralCode as PrismaReferralCode,
  User as PrismaUser,
} from "@prisma/client";

export class ReferralCodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReferralCodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.referralCode.count(args);
  }

  async referralCodes(
    args: Prisma.ReferralCodeFindManyArgs
  ): Promise<PrismaReferralCode[]> {
    return this.prisma.referralCode.findMany(args);
  }
  async referralCode(
    args: Prisma.ReferralCodeFindUniqueArgs
  ): Promise<PrismaReferralCode | null> {
    return this.prisma.referralCode.findUnique(args);
  }
  async createReferralCode(
    args: Prisma.ReferralCodeCreateArgs
  ): Promise<PrismaReferralCode> {
    return this.prisma.referralCode.create(args);
  }
  async updateReferralCode(
    args: Prisma.ReferralCodeUpdateArgs
  ): Promise<PrismaReferralCode> {
    return this.prisma.referralCode.update(args);
  }
  async deleteReferralCode(
    args: Prisma.ReferralCodeDeleteArgs
  ): Promise<PrismaReferralCode> {
    return this.prisma.referralCode.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.referralCode
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
